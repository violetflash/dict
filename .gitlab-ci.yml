# GitLab CI/CD Pipeline
#
# Флоу работы:
# 1. При создании/обновлении MR в develop:
#    - Проверка линтером
#    - Установка зависимостей
#    - Сборка проекта
#
# 2. При создании/обновлении MR в main:
#    - Все проверки как в develop
#    - Деплой на Vercel (временно отключен)
#
# Кэширование:
# - node_modules и .npm-cache кэшируются для ускорения сборок
# - Ключ кэша зависит от ветки

image: node:20-alpine

variables:
  NODE_VERSION: '20.11.1'
  LINEAR_ACCESS_TOKEN: ${LINEAR_ACCESS_TOKEN}

stages:
  - quick-lint
  - install
  - build
  - mirror # заливаем в github
  # - deploy # Временно отключен
  # - .post # Временно отключен

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/
    - .pnpm-store/

# Правила запуска пайплайна
workflow:
  rules:
    # Запускать только при создании/обновлении MR в develop
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "develop"
    # Или при создании/обновлении MR в main
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"
    # Отключаем для всех остальных случаев
    - when: never

# Проверка линтером
quick-lint:
  stage: quick-lint
  script:
    - npm install -g pnpm
    - pnpm install
    - pnpm run lint
    # - pnpm run type-check

# Установка зависимостей
install:
  stage: install
  script:
    - npm install -g pnpm
    - pnpm install
  artifacts:
    paths:
      - node_modules/

# Сборка проекта
build:
  stage: build
  script:
    - npm install -g pnpm
    - pnpm run build
  artifacts:
    paths:
      - dist/
    expire_in: 1 week
  dependencies:
    - install

    # Синхронизация с GitHub
mirror-to-github:
  stage: mirror
  script:
    - apt-get update && apt-get install -y git
    # Настраиваем Git
    - git config --global user.name "${GITLAB_USER_NAME}"
    - git config --global user.email "${GITLAB_USER_EMAIL}"
    # Добавляем GitHub remote и пушим изменения
    - git remote add github https://${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}@https://github.com/violetflash/dict.git
    - git push --mirror github
    rules:
    # Запускать только при создании/обновлении MR в develop
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "develop"
    # Или при создании/обновлении MR в main
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"
    # Отключаем для всех остальных случаев
    - when: never
  # rules:
  #   - if: $CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "develop"
  #     when: always
  #   - when: never


# Деплой на Vercel (временно отключен)
# deploy:
#   stage: deploy
#   image: node:18-alpine
#   script:
#     - npm install -g pnpm
#     - npm install -g vercel
#     - pnpm install
#     - vercel --token $VERCEL_TOKEN --prod
#   dependencies:
#     - build
#   rules:
#     - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"

# Уведомления в Slack (временно отключены)
# notify:
#   stage: .post
#   script:
#     - |
#       if [ $CI_PIPELINE_STATUS = "success" ]; then
#         curl -X POST -H 'Content-type: application/json' --data "{\"text\":\"✅ Pipeline успешно выполнен в ветке $CI_COMMIT_BRANCH\"}" $SLACK_WEBHOOK_URL
#       else
#         curl -X POST -H 'Content-type: application/json' --data "{\"text\":\"❌ Pipeline завершился с ошибкой в ветке $CI_COMMIT_BRANCH\"}" $SLACK_WEBHOOK_URL
#       fi
#   rules:
#     - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"
