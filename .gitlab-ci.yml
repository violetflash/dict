# GitLab CI/CD Pipeline
#
# Флоу работы:
# 1. При создании/обновлении MR в develop:
#    - Проверка линтером
#    - Установка зависимостей
#    - Сборка проекта
#
# 2. При создании/обновлении MR в main:
#    - Все проверки как в develop
#    - Деплой на Vercel (временно отключен)
#
# Кэширование:
# - node_modules и .npm-cache кэшируются для ускорения сборок
# - Ключ кэша зависит от ветки

image: node:20-alpine

variables:
  NODE_VERSION: '20.11.1'
  LINEAR_ACCESS_TOKEN: ${LINEAR_ACCESS_TOKEN}

stages:
  # - quick-lint
  # - install
  # - build
  - mirror # заливаем в github
  # - deploy
  # - .post

# cache:
#   key: ${CI_COMMIT_REF_SLUG}
#   paths:
#     - node_modules/
#     - .pnpm-store/

# Правила запуска пайплайна
workflow:
  rules:
    # Запускать только при создании/обновлении MR в develop
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "develop"
    # Или при создании/обновлении MR в main
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"
    # Отключаем для всех остальных случаев
    - when: never

# Проверка линтером
# quick-lint:
#   stage: quick-lint
#   script:
#     - npm install -g pnpm
#     - pnpm install
#     - pnpm run lint

# Установка зависимостей
# install:
#   stage: install
#   script:
#     - npm install -g pnpm
#     - pnpm install
#   artifacts:
#     paths:
#       - node_modules/

# Сборка проекта
# build:
#   stage: build
#   script:
#     - npm install -g pnpm
#     - pnpm run build
#   artifacts:
#     paths:
#       - dist/
#     expire_in: 1 week
#   dependencies:
#     - install

# Синхронизация с GitHub
# mirror-to-github:
mirror-to-github:
  stage: mirror
  variables:
    GITHUB_TOKEN: ${GITHUB_TOKEN}
  script:
    - apk add --no-cache git
    - git config --global user.name "GitLab CI"
    - git config --global user.email "gitlab-ci@your-domain.com"
    - echo "Setting up GitHub remote..."
    - |
      if [ -n "${GITHUB_TOKEN}" ]; then
        echo "Token is present"
        # Клонируем репозиторий полностью
        git clone --mirror https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/dictionary-app-42/dict-fe.git
        cd dict-fe.git
        # Добавляем GitHub remote
        git remote add github "https://${GITHUB_TOKEN}@github.com/violetflash/dict.git"
        # Пушим все изменения с force
        git push -f github --all
        git push -f github --tags
      else
        echo "Error: GITHUB_TOKEN is not set"
        exit 1
      fi
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "develop"
      when: always
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"
      when: always
    - when: never
# Деплой на Vercel (временно отключен)
# deploy:
#   stage: deploy
#   image: node:18-alpine
#   script:
#     - npm install -g pnpm
#     - npm install -g vercel
#     - pnpm install
#     - vercel --token $VERCEL_TOKEN --prod
#   dependencies:
#     - build
#   rules:
#     - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"

# Уведомления в Slack (временно отключены)
# notify:
#   stage: .post
#   script:
#     - |
#       if [ $CI_PIPELINE_STATUS = "success" ]; then
#         curl -X POST -H 'Content-type: application/json' --data "{\"text\":\"✅ Pipeline успешно выполнен в ветке $CI_COMMIT_BRANCH\"}" $SLACK_WEBHOOK_URL
#       else
#         curl -X POST -H 'Content-type: application/json' --data "{\"text\":\"❌ Pipeline завершился с ошибкой в ветке $CI_COMMIT_BRANCH\"}" $SLACK_WEBHOOK_URL
#       fi
#   rules:
#     - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"
